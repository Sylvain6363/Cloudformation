##########################################################
#                  TEMPLATE SYSTEME                      #
##########################################################
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Template Système

Resources:

#########################################
#     L'UTILISATEUR ET SON ACCES S3     #
#########################################
  UserS3:
    Type: AWS::IAM::User
    Properties:
      UserName: WordpressS3
      # Politique accordant les autorisations permettant 
      # l'accès complet à Amazon S3
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # Créer une clé d'accès secrète AWS et son ID
  UserAccessKeyS3:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref UserS3

########################################
#            LE BUCKET S3              #
########################################
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: wordpress-bucket-sylvain
      Tags:
        - Key: Name
          Value: Mon Bucket S3

###########################################
#         LA LAUNCH CONFIGURATION         #
#     ET SON CONTAINER DOCKER WORDRESS    #
###########################################
  LaunchConfig: 
    DependsOn: 
      - S3Bucket
      - UserAccessKeyS3
      - LoadBalancer
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: website
      AssociatePublicIpAddress: true
      InstanceMonitoring: true
      ImageId: ami-0d3c032f5934e1b41
      InstanceType: t2.micro
      SecurityGroups:
        - !ImportValue 
            Fn::Sub: LaunchConfigSecurityGroup 
      UserData:
        Fn::Base64: !Sub 
          - |
            #!/bin/bash
            export loadbalancerdnsname=${LoadBalancer.DNSName}
            export accesskeyid=${UserAccessKeyS3}
            export secretaccesskey=${UserAccessKeyS3.SecretAccessKey}
            export bucket=${S3Bucket}
            export dbaddress=${DBAddress}

            cat > /home/ec2-user/variables.txt <<EOF 
            $accesskeyid
            $secretaccesskey
            $loadbalancerdnsname
            $bucket
            $dbaddress
            EOF
            echo "Fichier des variables AWS : Ok " >> /var/log/install.txt

            sudo yum update -y
            echo "Mise a jour des paquets : Ok " >> /var/log/install.txt
            sudo amazon-linux-extras install epel docker -y
            echo "Installation du dépot EPEL et de docker : Ok " >> /var/log/install.txt
            mkdir /home/ec2-user/s3bucket
            echo "Répertoire s3bucket créé : Ok " >> /var/log/install.txt
            chmod -R 777 /home/ec2-user/s3bucket
            echo "Ajouter des droits récursifs au répertoire s3bucket : Ok " >> /var/log/install.txt
            sudo yum install s3fs-fuse mysql -y
            echo "Installation de s3fs-fuse et du client mysql : Ok " >> /var/log/install.txt
            cat > /home/ec2-user/.passwd-s3fs <<EOF
            $accesskeyid:$secretaccesskey
            EOF
            echo "Fichier password-s3fs créé : Ok " >> /var/log/install.txt
            sudo chmod 600 /home/ec2-user/.passwd-s3fs
            echo "Ajouter des droits au fichier password-s3fs : Ok " >> /var/log/install.txt
            sudo bash -c "echo 'wordpress-bucket-sylvain /home/ec2-user/s3bucket fuse.s3fs _netdev,nonempty,allow_other,passwd_file=/home/ec2-user/.passwd-s3fs 0 0' >> /etc/fstab"
            echo "Bucket ajouté dans le fichier fstab : Ok " >> /var/log/install.txt
            sudo mount -a
            echo "Le partage du Bucket est monté : Ok " >> /var/log/install.txt
            sudo usermod -a -G docker ec2-user
            echo "Ajouter l'utilisateur ec2-user au groupe docker : Ok " >> /var/log/install.txt
            sudo systemctl enable docker.service
            echo "Activer docker au démarrage du serveur : Ok " >> /var/log/install.txt
            sudo systemctl start docker.service
            echo "Démarrer docker : Ok " >> /var/log/install.txt
            cat > /home/ec2-user/docker-compose.yml <<EOF
            version: "3"
            services:
              Backup:
                image: offen/docker-volume-backup:latest
                environment:
                  AWS_ACCESS_KEY_ID: $accesskeyid
                  AWS_SECRET_ACCESS_KEY: $secretaccesskey
                  AWS_S3_BUCKET_NAME: $bucket
                  BACKUP_CRON_EXPRESSION: '0 3 * * *'
                  BACKUP_FILENAME: sauvegarde_%d-%m-%Y_%H-%M-%S.tar.gz
                  BACKUP_PRUNING_PREFIX: sauvegarde_
                  BACKUP_RETENTION_DAYS: 7
                volumes:
                  - data:/backup/html:ro
                restart: always
              MonWordpress:
                image: wordpress:latest
                environment:
                  WORDPRESS_DB_HOST: $dbaddress:3306
                  WORDPRESS_DB_USER: wordpress
                  WORDPRESS_DB_PASSWORD: motdepasse
                  WORDPRESS_DB_NAME: WordPress
                ports:
                  - 80:80
                restart: always
                volumes:
                  - data:/var/www/html
            volumes:
              data:
            EOF
            echo "Fichier docker-compose.yml créé : Ok " >> /var/log/install.txt
            sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/bin/docker-compose
            echo "Installation de docker-compose : Ok " >> /var/log/install.txt
            sleep 5
            sudo chmod +x /usr/bin/docker-compose
            echo "Donner les droits d'execution à docker-compose : Ok " >> /var/log/install.txt
            sudo docker-compose -f /home/ec2-user/docker-compose.yml up -d
            echo "Lancement de docker-compose en mode détaché : Ok " >> /var/log/install.txt
            sudo docker exec -ti --tty=false ec2-user_MonWordpress_1 bash <<-EOF
            ln -sf /usr/share/zoneinfo/Europe/Paris /etc/localtime
            echo "Changer la zone pour l'heure : Ok " >> /var/log/install.txt
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            echo "Telechargement de wp-cli : Ok " >> /var/log/install.txt
            chmod +x wp-cli.phar
            echo "Donner les droits d'execution à wp-cli : Ok " >> /var/log/install.txt
            mv wp-cli.phar /usr/local/bin/wp
            echo "Déplacer le wp-cli : Ok " >> /var/log/install.txt
            wp core install --url="$loadbalancerdnsname" --title="SiteWebdeSylvain" --admin_user=sylvain --admin_password=motdepasse --admin_email="monemail@yahoo.fr" --allow-root
            echo "Wp-cli installe wordpress : Ok " >> /var/log/install.txt
            sleep 10
            wp plugin install amazon-s3-and-cloudfront --allow-root
            echo "Wp-cli nstalle le plugin amazon-s3-and-cloudfront : Ok " >> /var/log/install.txt
            sleep 4
            wp plugin activate amazon-s3-and-cloudfront --allow-root
            echo "Wp-cli active le plugin amazon-s3-and-cloudfront : Ok " >> /var/log/install.txt
            cd /var/www/html
            echo "Se placer dans le répertoire html : Ok " >> /var/log/install.txt
            sed -i "127idefine( 'AS3CF_SETTINGS', serialize( array('provider' => 'aws','access-key-id' => '$accesskeyid','secret-access-key' => '$secretaccesskey', 'use-server-roles' => false, 'bucket' => '$bucket', 'region' => 'eu-west-3', 'copy-to-s3' => true, 'enable-object-prefix' => true, 'object-prefix' => 'wp-content/uploads/', 'use-yearmonth-folders' => true, 'object-versioning' => true, 'serve-from-s3' => true, 'remove-local-file' => true,) ) );" wp-config.php
            echo "Modification du fichier wp-config.php : Ok " >> /var/log/install.txt
            chmod -R 777 /var/www/html/
            echo "Ajouter des droits récursifs au répertoire html  : Ok " >> /var/log/install.txt
            exit
            EOF
          - DBAddress:
              Fn::ImportValue: DBAddress

########################################
#     LE LOAD BALANCER, SON LISTENER   #
#          ET SON TARGET GROUP         #
#        (répartiteur de charge)       #
########################################
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      # Accessible depuis l'extérieur
      Scheme: internet-facing
      SecurityGroups:
        - !ImportValue 
            Fn::Sub: LoadBalancerSecurityGroup 
      Subnets:
        - !ImportValue 
            Fn::Sub: SubnetPublicA
        - !ImportValue 
            Fn::Sub: SubnetPublicB
  # Active l'ecoute du loadbalanceur sur le port 80
  # et réparti les demandes au groupe cible
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup: 
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        # Port sur lequel les cibles reçoivent le trafic
        Port: 80
        Protocol: HTTP
        # Vérification de l'état des instances activé
        HealthCheckEnabled: true
        TargetType: instance
        # Nombre de vérifications d'état consécutives réussies 
        # requises avant de considérer une cible non opérationnelle comme saine
        HealthyThresholdCount: 2
        # Nombre d'échecs de vérification d'état consécutifs requis avant de 
        # considérer une cible comme non opérationnelle
        UnhealthyThresholdCount: 2
        # Durée en secondes, pendant laquelle aucune réponse d'une cible signifie un échec de la vérification de l'état
        HealthCheckTimeoutSeconds: 10
        # Durée approximative en secondes, entre les vérifications de l'état d'une cible individuelle
        HealthCheckIntervalSeconds: 15
        HealthCheckPath: /
        HealthCheckPort: traffic-port
        HealthCheckProtocol: HTTP
        # Codes HTTP à utiliser lors de la vérification d'une réponse réussie d'une cible
        Matcher: 
          HttpCode: 200
        TargetGroupAttributes:
        # Sessions permanentes actives
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        VpcId: !ImportValue
          Fn::Sub: VPC  

#######################################
#       LES REGLES D'AUTOSCALING      #
#             ET SON GROUPE           #
#######################################
  ScalingUpPolicy:
    DependsOn: ScalingGroup
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ScalingGroup
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments: 
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 10
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 10
          ScalingAdjustment: 1

  ScalingDownPolicy:
    DependsOn: ScalingGroup
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ScalingGroup
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments: 
        - MetricIntervalUpperBound: 0
          MetricIntervalLowerBound: -10
          ScalingAdjustment: -1
        - MetricIntervalUpperBound: -10
          ScalingAdjustment: -1
    

# Définir le groupe de zones et de reseaux qui beneficiront de l'autoscaling
  ScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfig
      AvailabilityZones:
         #Prends la zone de disponibilité 0 
        - Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
          #Prends la zone de disponibilité 1
        - Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      VPCZoneIdentifier:
        - !ImportValue 
            Fn::Sub: SubnetPublicA
        - !ImportValue 
            Fn::Sub: SubnetPublicB
      # Durée en secondes, après la fin d'une activité de mise à l'échelle 
      # avant qu'une autre activité de mise à l'échelle puisse démarrer
      Cooldown: 60
      MaxSize: 4
      MinSize: 2
      # Capacité qu'il tente de maintenir
      DesiredCapacity: 2
      # Durée en secondes pendant laquelle, l'Auto Scaling attend 
      # avant de vérifier l'état de santé d'une instance EC2 qui est entrée en service
      HealthCheckGracePeriod: 20
      HealthCheckType: EC2
      MetricsCollection:
        - Granularity: 1Minute
      TargetGroupARNs:
        - !Ref TargetGroup
      NotificationConfigurations:
      - TopicARN: !Ref Notification
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        - autoscaling:TEST_NOTIFICATION
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: Wordpress Docker

########################################
#        SUPERVISION CLOUDWATCH        #
#  > Augmente les ressources à partir  #
#    de 80 % de charge du processeur   #
#  > Diminue les ressources en desous  #
#     de 40 % de charge processeur     #
########################################
  CPUAlarmHigh:
    DependsOn: ScalingGroup
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarme et Upscale si l'utilisation du CPU est supérieur à 80% pendant 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      # Période en secondes, sur laquelle la statistique est appliquée
      # 5 min
      Period: 300
      # nombre de périodes pendant lesquelles les données sont comparées au seuil spécifié
      EvaluationPeriods: 1
      # Valeur à comparer avec la statistique spécifiée
      # Le pourcentage d'utilisation du CPU
      Threshold: 80
      # Active la règle qui upscale et envoie une notification
      AlarmActions: 
        - !Ref ScalingUpPolicy
        - !Ref Notification
      Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref ScalingGroup
      ComparisonOperator: GreaterThanThreshold 

  CPUAlarmLow:
    DependsOn: ScalingGroup
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarme et Downscale si l'utilisation CPU est inférieur à 40% pendant 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 40
      AlarmActions: 
        - !Ref ScalingDownPolicy
        - !Ref Notification
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref ScalingGroup
      ComparisonOperator: LessThanThreshold

#########################################
#       NOTIFICATION PAR MAIL SNS       #
#########################################
  Notification:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: AlerteInfraWeb
      Subscription:
        - Endpoint: monemail@yahoo.fr
          Protocol: email
      TopicName: AlerteInfraWeb

##########################################################
#   LOG DE TOUT LE TRAFFIC VERS MON BUCKET AVEC FLOWLOG  #
##########################################################
  FlowLogBucket:
    Type: AWS::EC2::FlowLog
    DependsOn: S3Bucket
    Properties:
      LogDestination: !GetAtt S3Bucket.Arn
      LogDestinationType: s3
      ResourceId: !ImportValue
          Fn::Sub: VPC
      ResourceType: VPC
      TrafficType: ALL

#########################################      
#       L'INSTANCE DU SERVEUR VPN       #
#      ET SA ROUTE POUR L'ENTREPRISE    #
#########################################
  PasserelleVPN:
    Type: AWS::EC2::Instance
    Properties:
      SourceDestCheck: false
      KeyName: website
      ImageId: ami-04e905a52ec8010b2
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !ImportValue
            Fn::Sub: SubnetPrivateC 
          PrivateIpAddress: 10.0.50.10
          GroupSet:
            - !ImportValue 
                Fn::Sub: PasserelleVPNSecurityGroup
      Tags:
        - Key: Name
          Value: Passerelle VPN
      UserData:
        Fn::Base64:
          !Sub 
          - |
            #!/bin/bash
            export NatEip=${NatEip}
            export NatGateway=${NatGateway}
            sudo su - root
            echo "Passer en utilisateur root : Ok " >> /var/log/install.txt
            apt-get update -y
            echo "Mise a jour des paquets : Ok " >> /var/log/install.txt
            sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
            sysctl -p
            echo "Activer le forward des paquets ipv4 : Ok " >> /var/log/install.txt
            echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections
            echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections
            apt-get install iptables-persistent -y
            iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
            iptables-save > /etc/iptables/rules.v4
            echo "Ajouter la route nat masquerade : Ok " >> /var/log/install.txt
            apt-get install openvpn -y
            echo "Installation d'openvpn : Ok " >> /var/log/install.txt
            cat > /etc/openvpn/client/client.conf <<EOF
            client
            dev tun
            proto udp
            remote #IP PUBLIQUE ENTREPRISE# 1194
            nobind
            resolv-retry infinite
            persist-key
            persist-tun
            remote-cert-tls server
            auth SHA512
            cipher AES-256-CBC
            ignore-unknown-option block-outside-dns
            block-outside-dns
            verb 3
            <ca>
            -----BEGIN CERTIFICATE-----
            MIIDQjCCAiqgAwIBAgIUcMNcrFLwdnqWLgXKpqBky4DeeygwDQYJKoZIhvcNAQEL
            BQAwEzERMA8GA1UEAwwIQ2hhbmdlTWUwHhcNMjIwMTEzMjE0OTQ5WhcNMzIwMTEx
            MjE0OTQ5WjATMREwDwYDVQQDDAhDaGFuZ2VNZTCCASIwDQYJKoZIhvcNAQEBBQAD
            ggEPADCCAQoCggEBANTKhCuNxFwo62sfO+Pie4MW7FztsNkmgopk5lbMF407VANr
            h/B0tEE46a7KuhFIeaUN5SsYajziYN5rJWV60DTiq5RLKRpVdqN6kh5AvXcQVdmI
            3zcHiyyDqxgs/Gz8kOmp1BrNOEOW/1mJ/IQJ0JBmr2jm5nzcjrS8PFR0norBN+93
            PUfqWi6xqqSRDQWqDImmoUSCVWgW0iggmuhDg6Ae1rIGIGVf7XRUeGzCyd/9/9w4
            bYAQ60qlXwNzscLrkuc1DDnbsk/xXVeVdpI/1X7PyXibYN9vpFePmhtb3Aug6bLP
            Mj92npMbBACPIZKbSgv4uHJkjhqaMgZ9vrSGMmECAwEAAaOBjTCBijAdBgNVHQ4E
            FgQUkRN9B28vpY39uD6ARR7ocDTVjB0wTgYDVR0jBEcwRYAUkRN9B28vpY39uD6A
            RR7ocDTVjB2hF6QVMBMxETAPBgNVBAMMCENoYW5nZU1lghRww1ysUvB2epYuBcqm
            oGTLgN57KDAMBgNVHRMEBTADAQH/MAsGA1UdDwQEAwIBBjANBgkqhkiG9w0BAQsF
            AAOCAQEAw1PrHLHpuHThe1w8xDVCUPlcl3BtcT146QJvthmGEBzxCyapd48EyiET
            WtZufoFJke1yWPyGkY3HEhfCQoL2wNN9t3yFDZZ8lMNsALhy6QM8isUvPlfh9eJZ
            EPAGjGsHDFSUBWJcrMwbcp0wyG/Zd3+/NJcrWWcCuU48RNmtEthkJ68cAmQjV2Ar
            EHzzwiUtDHKffQMDbh0KiwyOZZEgsrVsc9TVrKxwSR3e0V3nd7EorWK3py38cv8i
            +l4r51/2hN0yJzLjJMfIE65PjtF018bRLKLhLvpkyaUIBWiH196tdyZ3Z7RlrpKs
            UnxGZIsw58dOePcu1VMlTKAmAZyNMw==
            -----END CERTIFICATE-----
            </ca>
            <cert>
            -----BEGIN CERTIFICATE-----
            MIIDTzCCAjegAwIBAgIRAPGCf07V43G8xvh/50nOmVgwDQYJKoZIhvcNAQELBQAw
            EzERMA8GA1UEAwwIQ2hhbmdlTWUwHhcNMjIwMTEzMjE0OTQ5WhcNMzIwMTExMjE0
            OTQ5WjARMQ8wDQYDVQQDDAZjbGllbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
            ggEKAoIBAQC91wuzUJxi+Pu/Mgc5LMGOHNqPGVdVhQAK9klgPHVAqa/4j8eIXEQb
            PT3KtdFySXGIXZB5QQ1zbAJZ9h9WyFX3T2Sd1QqI+sGTeQSTKJjW+XERdV4RMYPQ
            NGW0jWru30BkmQo/akNsGOSUa4V3jbFryvf86W6OE6iLnirmVcumr/JDLQBdnnfM
            5WGveZWnZ6MhH5G3lS1SAt+HIKiezhSdLMLCbuomsQ238fcpsd8KApvr9GrYJz2s
            pAH461cz78PXCq4eUBrRNxwcdUZK9OIZAdLHxsqfRXqzPFGBk26kl5/H+Vz52VE+
            N37YY1zKBsSny9UIfdDaBm/lvMFx/UqHAgMBAAGjgZ8wgZwwCQYDVR0TBAIwADAd
            BgNVHQ4EFgQU2nxcj9/S/csbiaJblBrQVX2emxYwTgYDVR0jBEcwRYAUkRN9B28v
            pY39uD6ARR7ocDTVjB2hF6QVMBMxETAPBgNVBAMMCENoYW5nZU1lghRww1ysUvB2
            epYuBcqmoGTLgN57KDATBgNVHSUEDDAKBggrBgEFBQcDAjALBgNVHQ8EBAMCB4Aw
            DQYJKoZIhvcNAQELBQADggEBAG9oWnk8epSEZkDpGoJpiU7D/C7MI5AjMrgGQOEB
            2hXT+ApAjMJzvx9iGYT4by+I8U1c4VptZdN/SI7rWqdQ3vX9qx0UI7V4CirruIyN
            4xDaQTaXFOzoL8np6tsdXfMuDFANrksT86xezoC3J1PDWiP2yGd52JE34mRUY9wl
            JMT254LnO1hLqYS0zo6bxEzex6Wdio7p5nGEtkWJwk/ipNjzPT4nry0M62tlYNJC
            qr6SoF2eS9E3tFgLdG6U38WdRDp65+L+PBmtQ4gRK+zD9sG14l0vv5jd7KpFgYLX
            SpmIfMxNiKvB3m8xQ0zJXFoPDXYKMFuB+CCm82MEnLrejLk=
            -----END CERTIFICATE-----
            </cert>
            <key>
            -----BEGIN PRIVATE KEY-----
            MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC91wuzUJxi+Pu/
            Mgc5LMGOHNqPGVdVhQAK9klgPHVAqa/4j8eIXEQbPT3KtdFySXGIXZB5QQ1zbAJZ
            9h9WyFX3T2Sd1QqI+sGTeQSTKJjW+XERdV4RMYPQNGW0jWru30BkmQo/akNsGOSU
            a4V3jbFryvf86W6OE6iLnirmVcumr/JDLQBdnnfM5WGveZWnZ6MhH5G3lS1SAt+H
            IKiezhSdLMLCbuomsQ238fcpsd8KApvr9GrYJz2spAH461cz78PXCq4eUBrRNxwc
            dUZK9OIZAdLHxsqfRXqzPFGBk26kl5/H+Vz52VE+N37YY1zKBsSny9UIfdDaBm/l
            vMFx/UqHAgMBAAECggEAcb/6Fc7WdgNkrTKn211y+NlXKGlxyB9yYB8k5lIzm7RR
            aamVUKKgeIXgkacSQd259pDBsbYF/kQYwJjWPGS8Bfz/eAcgUeWWuevIjvjDZASA
            +IoP/FNj/Qx4aJBYI5uH9P8ygb8FeS8NP9WRWop/ZexvXY7tnJow4r+6StvbtBst
            Quv7SFcc5upjNirEbFJrvOrV4f4/UA8ROG9CslE8QKfIKi6mXXrDIa/dTneR8fv5
            2wWqDIbrT1ckUV/O/w0fJgfDJyBoc4aZl09EqGjMwKeogV++5eaQT2uA3NaV75Y/
            L9V6SZjPsvz6vef8lX6Xp+qyjxU3Fa2VNi4PZcSVUQKBgQD2gWcmOjv7XYFfobfe
            MY3EY+yhNo0vFvL8MOdJfmzCk9Pus7uO4HhfRK+f3zRPN4GIIdk2I4Bub9m8BnwC
            KCiLoFeTfPqyoRJwgJHtWnvJ6dX3TJSAI4O/ptm9jMiYhMSSf/QSLgAyg+hJeQEM
            vlWtmS9WxSu0iyJqXuZ/KgYieQKBgQDFJui/agevmohMmlyRgV8TQUk3d0jFkiYT
            zabNDGSW329rF9DJcLtcLqvcGmtON3JxYNNJSrdAeSKEvGj0PodnBs+FDkwethd0
            ji+ObKjb8B2UUxvPqkmP4PZaFxLUJ4divydQlAmCeMz6OactemKz9n6lP7Q/otVS
            V98OVMuU/wKBgQCBxOvNdxi+oqIJ+zO1mDa+rbATyokWwikW1JPd391XrcUDQ8E4
            XTlhReKC8lkyXtElHlSgKJ5jBSUF1BASfpuhrb6M2V2NDjiL21N3NYw3Zo+Kidkf
            gBLKoQa9v9CWYkatrQiLTYYzEbgGfdosoEKwihUew9vXRuvOPblwNmpWWQKBgQDD
            UekEumci8lZWjhdnkGRBD00aRnMySbivpe669qwxTOt1jgKrj6QPj610QjhNJWGc
            MfEhi4RBu8EXABJ65/f9eiHeEGwZgQ17y+IRmFUykJC9ghjrhCmdAaMPXgypYwAe
            NIMesYs6V7O7s6KMy9M9t9eAn7xTz17IVYYHDLskwQKBgAzahuNaz2R90cfDMZq+
            ddhipO2D1USIvelXygAK1K5oIEQ0dXdBS+2KjOhuM0f5mQZ5RmKW/FYAtfUO7xw2
            wCxXHf0gb8e6m8bXx80R7TCB2bvuhYpD0N6000UjQ8L6FB1b6DubCmETqhguz1F9
            yZPW6EXtGVe+j0ql1Wzee2f5
            -----END PRIVATE KEY-----
            </key>
            <tls-crypt>
            -----BEGIN OpenVPN Static key V1-----
            05052bdaf0a854db0203c2116aff1e49
            4ca8d3c389f39f589ce4e7d57bfd467e
            a86a17e97aa79a61afad145ac6453fc0
            ff31e8e82a6482e6ad1057ea8499ee44
            ed5d48120785b7d2a2528091d184b45f
            374860b7805041f5065986b3204a0737
            1eb070793f4b1018bdde6386a76a6d01
            7a6e1f50679c7bf014d9346281e7eaf1
            b20957cbc13b8dff6452fd6574372816
            2b658f538420de8973bc930c52d217b5
            8330149a63c306239d35557d512ed14d
            48caacf3fe90c46a1914aec537f54381
            e0be4d1ddd6e0f46f420bd1ce65c6cf7
            1b7e5adae6195446136b1a512bcb8735
            99a19b06214188e2031968f0bfbc0e1d
            5b0c35acfb6cab73e47bddb704205cf0
            -----END OpenVPN Static key V1-----
            </tls-crypt>
            EOF
            echo "Création du fichier client.conf : Ok " >> /var/log/install.txt
            systemctl enable --now openvpn-client@client.service
            echo "Activer openvpn et le lancer a chaque redemarrage serveur : Ok " >> /var/log/install.txt
            exit
          - NatEip: 
              Fn::ImportValue: NatEip
            NatGateway:
              Fn::ImportValue: NatGateway

# Creation d'une route a destination du reseau de l'entreprise local 
# par le biais de la passerelle VPN
  PrivateRouteC2:
    DependsOn: PasserelleVPN
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 192.168.50.0/24
      InstanceId: !Ref PasserelleVPN
      RouteTableId: !ImportValue
        Fn::Sub: PrivateRouteTableC

########################################      
#   INSTANCE DU SERVEUR INTRANET       #
########################################
  IntranetServer:
    DependsOn: PasserelleVPN
    Type: AWS::EC2::Instance
    Properties: 
      KeyName: website
      ImageId: ami-04e905a52ec8010b2
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !ImportValue
            Fn::Sub: SubnetPrivateC
          PrivateIpAddress: 10.0.50.20
          GroupSet:
            - !ImportValue 
                Fn::Sub: IntranetSecurityGroup
      Tags:
        - Key: Name
          Value: Serveur Intranet
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo su - root
            echo "Passer en utilisateur root : Ok " >> /var/log/install.txt 
            apt update
            echo "Mise a jour des paquets : Ok " >> /var/log/install.txt
            apt upgrade -y
            echo "Mettre à jour le système : Ok " >> /var/log/install.txt
            apt install curl -y
            echo "Installer curl : Ok " >> /var/log/install.txt
            curl -sSL https://packages.sury.org/apache2/README.txt | bash -x
            echo "Ajouter le referentiel Apache : Ok " >> /var/log/install.txt
            apt update
            echo "Remettre à jour les paquets : Ok " >> /var/log/install.txt
            apt install apache2 -y 
            echo "Installer la dernière version d'apache2 : Ok " >> /var/log/install.txt
            touch /var/www/html/index.html
            echo "Créer le fichier /var/www/html/index.html vide : Ok " >> /var/log/install.txt
            chmod 777 /var/www/html/index.html
            echo "Ajouter des droits au fichier /var/www/html/index.html : Ok " >> /var/log/install.txt
            wget https://www.lenouveleconomiste.fr/wp-content/uploads/2020/07/lintranet-se-transforme-en-digital-workplace-826x459.jpg
            echo "Télécharger l'image de l'intranet : Ok " >> /var/log/install.txt
            mv lintranet-se-transforme-en-digital-workplace-826x459.jpg /var/www/html/image.jpg
            echo "Modifier le nom et l'emplacement de l'image intranet : Ok " >> /var/log/install.txt
            cat > /var/www/html/index.html <<EOF
            <!DOCTYPE html>
            <html>
            <head>
            <meta charset="UTF-8">
            <title>Intranet</title>
            </head>
            <body>
            <CENTER>
            <h2> ### Bienvenue sur l'intranet ! ### </h2>
            <p>
            <img src="image.jpg"/>
            </p>
            </CENTER>
            </body>
            </html>
            EOF
            echo "Insérer le contenu du fichier /var/www/html/index.html : Ok " >> /var/log/install.txt
            systemctl start apache2
            echo "Démarrer apache2 : Ok " >> /var/log/install.txt
            systemctl enable apache2
            echo "Activer apache2 et le lancer a chaque redemarrage serveur : Ok " >> /var/log/install.txt
            apt install nfs-common -y
            echo "Installer nfs-common : Ok " >> /var/log/install.txt
            mkdir /mnt/partage
            echo "Créer le repertoire /mnt/partage : Ok " >> /var/log/install.txt
            echo '192.168.50.50:/partage  /mnt/partage  nfs4      defaults    0    0'  > /etc/fstab
            echo "Insérer la ligne de configuration du partage dans fstab : Ok " >> /var/log/install.txt
            mount -a
            echo "Monter le partage : Ok " >> /var/log/install.txt
            exit